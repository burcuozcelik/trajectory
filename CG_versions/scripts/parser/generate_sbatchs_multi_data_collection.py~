from __future__ import division
import os
import sys
import os
import glob
from sys import argv

solvers = ['cg']
datasets = [ 'ex3']

#datasets = ['bcsstk13', 'bcsstk14', 'bcsstk15', 'bcsstk16', 'bcsstk24', 'bcsstk27', 'bcsstk38', 'ex3', 'ex9', 'ex13', 'ex15', 'Kuu', 'msc04515', 'nasa2146', 'sts4098', 's1rmq4m1', 's2rmq4m1', 's3rmq4m1', 's1rmt3m1', 's2rmt3m1', 's3rmt3m1'] 

distrubutions=[ 'uniform']
numbitflips=[['1', '2', '4']]

dirname=['results']
execname=['mlpredict']
pklname = 'cg_randomforest_100_masked.pkl'

#solvers = ['bicg']
#datasets = ['af_shell3']
#distrubutions=['normal']
#numbitflips=[['4']]

if len(argv) < 4:
        print("Usage: experiment_start_point; experiment_end_point; number_of_experiments_in_sbatch")
        sys.exit(1)

experiment_start_point=int(argv[1])
experiment_end_point=int(argv[2])
nrum_in_each_sbatch=int(argv[3])

cg_home=os.environ["SRC_HOME"]
dirinject= cg_home + "/src/global/nums/" 
sbatchdir="./sbatchs_multi/mlpredict"

for dindex in range(0, len(dirname)):
	
	#cleanup previous files
	rmfiles = glob.glob(sbatchdir + "/*.sh")
	for f in rmfiles:
		os.remove(f)

	for isolver in range(0,len(solvers)):
		for idataset in range (0, len(datasets)):
			for idis in range (0, len(distrubutions)):
				dis_bitflips=numbitflips[idis]
				for ibitflip in range (0, len(dis_bitflips)):
					if numbitflips[idis][ibitflip] != "-1":
						fname= solvers[isolver] + "_" + datasets[idataset] + "_" + distrubutions[idis] + "_" + numbitflips[idis][ibitflip] + "bit"
	    
						with open(dirinject + fname + ".rnd",'r') as fp:
							lines = fp.readlines()
							for iindex in range(experiment_start_point,experiment_end_point):
								if iindex % nrum_in_each_sbatch == 0:
									print fname + "_" + str(int(iindex/nrum_in_each_sbatch))
									fsbatch = open(sbatchdir + "/" + fname + "_" + str(int(iindex/nrum_in_each_sbatch)) + ".sh" , "w")
									fsbatch.write("#!/bin/bash\n")  
									fsbatch.write("#SBATCH --partition=pal\n") 
									fsbatch.write("#SBATCH --account pal\n")  
									fsbatch.write("#SBATCH -N 1\n") 
									fsbatch.write("#SBATCH -e "+fname + "_" + str(int(iindex/nrum_in_each_sbatch))+".err\n")  
									fsbatch.write("#SBATCH -o /dev/null\n")

								params=lines[iindex].split(";")

								cline="./" + solvers[isolver] + "_" + execname[dindex] + " ./datasets-all/" + datasets[idataset] + "/" + datasets[idataset] + ".rb "
								if dirname[dindex] == "baseline":
									cline = cline + "0 0 0 0 0"
								else:
									numbf= len(params) - 3
									cline = cline + "1 " + params[0] + " " + params[1] + " " + str(numbf)
									for bf in range(0,numbf):
										cline = cline + " " + params[2+bf]
									cline = cline + " " + pkl_name
								#results/mlpredict/results/cg/ex3
								ofile=cg_home + "/results/mlpredict/" + dirname[dindex] + "/"+ solvers[isolver] + "/" + datasets[idataset] + "/" + fname + "_" + str(int(iindex/nrum_in_each_sbatch)) + "_" + str(iindex % nrum_in_each_sbatch) + ".dat"
								fsbatch.write("if [ ! -f " + ofile + " ]\n")
								fsbatch.write("then\n")
								fsbatch.write("\t" + cline + " > " + ofile + " &\n")
								if dirname[dindex] == "data":
									fsbatch.write("elif [ \"$( grep -re \"NEWSUM_SCALER\" "+ ofile + " | wc -l )\" == \"0\" ] \n")
									fsbatch.write("then\n")
									fsbatch.write("\t" + cline + " > " + ofile + " &\n")
								fsbatch.write("fi\n\n")

								if iindex % nrum_in_each_sbatch == nrum_in_each_sbatch - 1:
									fsbatch.write("wait\n")
			
								#if iindex == num_iterations:
								#	break
								
		




	
        

